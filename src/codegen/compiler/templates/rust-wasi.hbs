pub mod wasi {
    {{wasi_wit_code}}

    struct Domain;

    impl domain::Domain for Domain {}

    pub struct Aggregate {
        aggregate: std::cell::RefCell<super::{{aggregate}}>,
    }

    impl domain::Aggregate for Aggregate {
        fn new(id: String) -> wit_bindgen_rust::Handle<Aggregate> {
            wit_bindgen_rust::Handle::new(Aggregate {
                aggregate: std::cell::RefCell::new(
                    <super::{{aggregate}} as thalo::aggregate::Aggregate>::new(id),
                ),
            })
        }

        fn apply_events(&self, events: Vec<Vec<u8>>) -> Result<(), domain::Error> {
            for event_data in events {
                let event: super::{{aggregate_event}} = serde_json::from_slice(&event_data)
                    .map_err(|_| domain::Error::DeserializeEvent)?;
                thalo::aggregate::Aggregate::apply(
                    std::ops::DerefMut::deref_mut(&mut self.aggregate.borrow_mut()),
                    event,
                );
            }

            Ok(())
        }

        fn handle_command(&self, command_data: Vec<u8>) -> Result<Vec<Vec<u8>>, domain::Error> {
            let command: super::{{aggregate_command_enum}} = serde_json::from_slice(&command_data)
                .map_err(|_| domain::Error::DeserializeCommand)?;

            let events = match command {
                {{#each commands}}
                    super::{{../aggregate_command_enum}}::{{command_name_variant}} {
                        {{#each params}}
                            {{this}},
                        {{/each}}
                    } => thalo::event::IntoEvents::into_events(
                        super::{{../aggregate_command}}::{{command_name}}(
                            &*self.aggregate.borrow(),
                            {{#each params}}
                                {{this}},
                            {{/each}}
                        )
                        .map_err(|err| domain::Error::Command(err.to_string().into_bytes()))?,
                    ),
                {{/each}}
            };

            Ok(events
                .iter()
                .map(|event| serde_json::to_vec(event).unwrap())
                .collect())
        }
    }
}
